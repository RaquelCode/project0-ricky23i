package com.PokeBox.data.postgres;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.HashSet;
import java.util.Set;

import com.PokeBox.beans.Pokemon;
import com.PokeBox.data.PokemonDAO;
import com.PokeBox.utils.ConnectionUtil;

/**
 * What I can see he has wall the code is well documented and organized. His connection works with the database  
 * All his DAO and Generic method seems to be fully integrated with the tables of the database 
 */

public class PokemonPostgres implements PokemonDAO{
	private ConnectionUtil connUtil = ConnectionUtil.getConnectionUtil();
	//create new pokemon.
	@Override
	public int create(Pokemon dataToAdd) {
	int generatedId=0;
		
		// try-with-resources auto-closes resources
		try (Connection conn = connUtil.getConnection()) {
			// when you run DML statements, you want to manage the TCL
			conn.setAutoCommit(false);
			
			String sql = "insert into pokemon (id,p_name,p_type,hp,p_exp,lv,item,trainer) "
					+ "values (default, ?, ?, ?, ?,?,?,?)";
			String[] keys = {"id"}; // the name of the primary key column that will be autogenerated
			// creating the prepared statement
			PreparedStatement pStmt = conn.prepareStatement(sql, keys);
			// we need to set the values of the question marks
			pStmt.setInt(3, dataToAdd.getHealth()); // question mark index starts at 1
			pStmt.setInt(4, dataToAdd.getExp());
			pStmt.setInt(5, dataToAdd.getLevel());
			pStmt.setString(2, dataToAdd.getType());
			pStmt.setString(1, dataToAdd.getName());
			if (dataToAdd.getItem().equals(""))
				{pStmt.setString(6, "null");}
			else
				{pStmt.setString(6, dataToAdd.getItem());}
			
			pStmt.setString(7, dataToAdd.getTrainer());
			
			// after setting the values, we can run the statement
			pStmt.executeUpdate();
			ResultSet resultSet = pStmt.getGeneratedKeys();
			
			if (resultSet.next()) { // "next" goes to the next row in the result set (or the first row)
				// getting the ID value from the result set
				generatedId = resultSet.getInt("id");
				conn.commit(); // running the TCL commit statement
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		
		return generatedId;
	}
//get all pokemon
	@Override
	public Set<Pokemon> getAll() {
Set<Pokemon> allPokemon = new HashSet<>();
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from pokemon";
			Statement stmt = conn.createStatement();
			ResultSet resultSet = stmt.executeQuery(sql);
			
			// while the result set has another row
			while (resultSet.next()) {
				// create the Pokemon object
				Pokemon poke = new Pokemon();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				poke.setId(resultSet.getInt("id"));
				poke.setName(resultSet.getString("p_name"));
				poke.setLevel(resultSet.getInt("lv"));
				poke.setType(resultSet.getString("p_type"));
				if(resultSet.getString("item")==null)
				poke.setItem("");
				else
				poke.setItem(resultSet.getString("item"));
				poke.setExp(resultSet.getInt("p_exp"));
				poke.setTrainer(resultSet.getString("trainer"));
				poke.setHealth(resultSet.getInt("hp"));
				
				allPokemon.add(poke);
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return allPokemon;
	}
//updates pokemon. 
	@Override
	public void update(Pokemon dataToUpdate) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);
			
			String sql = "update pokemon set "
					+ "hp=?,p_exp=?,lv=?,p_type=?,p_name=?,item=?,trainer=? "
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, dataToUpdate.getHealth());
			pStmt.setInt(2, dataToUpdate.getExp());
			pStmt.setInt(3, dataToUpdate.getLevel());
			pStmt.setString(4, dataToUpdate.getType());
			pStmt.setString(5, dataToUpdate.getName());
			if (dataToUpdate.getItem().equals(""))
				pStmt.setString(6, "null");
			else
				pStmt.setString(6, dataToUpdate.getItem());
			pStmt.setString(7, dataToUpdate.getTrainer());
			pStmt.setInt(8, dataToUpdate.getId());
			
			int rowsAffected = pStmt.executeUpdate();
			
			if (rowsAffected==1) {
				conn.commit();
			} else {
				conn.rollback();
			}
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public void delete(Pokemon dataToDelete) {
		try (Connection conn = connUtil.getConnection()) {
			conn.setAutoCommit(false);

			String sql = "delete from pokemon "
					+ "where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, dataToDelete.getId());

			int rowsAffected = pStmt.executeUpdate();
				
				if (rowsAffected<=1) {
					conn.commit();
				} else {
					conn.rollback();
				}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	// Gets pokemon whose level that is greater than the level provided
	@Override
	public Set<Pokemon> getByLevel(int level) {
		Set<Pokemon> allPokemon = new HashSet<>();

		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from pokemon where lv>?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, level);
	
			ResultSet resultSet = pStmt.executeQuery();

			// while the result set has another row
			while (resultSet.next()) {
				// create the pokemon object
				Pokemon poke = new Pokemon();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				poke.setId(resultSet.getInt("id"));
				poke.setName(resultSet.getString("p_name"));
				poke.setLevel(resultSet.getInt("lv"));
				poke.setType(resultSet.getString("p_type"));
				if(resultSet.getString("item")==null)
					poke.setItem("");
					else
					poke.setItem(resultSet.getString("item"));
				poke.setExp(resultSet.getInt("p_exp"));
				poke.setTrainer(resultSet.getString("trainer"));
				poke.setHealth(resultSet.getInt("hp"));
				allPokemon.add(poke);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return allPokemon;

	}
//gets by id generated
	@Override
	public Pokemon getByID(int id) {
	Pokemon poke=null;
		
		try (Connection conn = connUtil.getConnection()) {
			String sql = "select * from pokemon where id=?";
			PreparedStatement pStmt = conn.prepareStatement(sql);
			pStmt.setInt(1, id);
			
			ResultSet resultSet = pStmt.executeQuery();
			
			if (resultSet.next()) {
				poke=new Pokemon();
				poke.setId(resultSet.getInt("id"));
				poke.setName(resultSet.getString("p_name"));
				poke.setLevel(resultSet.getInt("lv"));
				poke.setType(resultSet.getString("p_type"));
				if(resultSet.getString("item")==null)
					poke.setItem("");
					else
					poke.setItem(resultSet.getString("item"));
				poke.setExp(resultSet.getInt("p_exp"));
				poke.setTrainer(resultSet.getString("trainer"));
				poke.setHealth(resultSet.getInt("hp"));
			}
			
			
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return poke;
	}
//gets all pokemon with items.
	@Override
	public Set<Pokemon> getByHasItem() {
		Set<Pokemon> allPokemon = new HashSet<>();

		try (Connection conn = connUtil.getConnection()) {
			Statement pStmt = conn.createStatement();
	
			ResultSet resultSet = pStmt.executeQuery("select * from pokemon where item is not null");

			// while the result set has another row
			while (resultSet.next()) {
				// create the Pokemon object
				Pokemon poke = new Pokemon();
				// pull the data from each row in the result set
				// and put it into the java object so that we can use it here
				poke.setId(resultSet.getInt("id"));
				poke.setName(resultSet.getString("p_name"));
				poke.setLevel(resultSet.getInt("lv"));
				poke.setType(resultSet.getString("p_type"));
				poke.setItem(resultSet.getString("item"));
				poke.setExp(resultSet.getInt("p_exp"));
				poke.setTrainer(resultSet.getString("trainer"));
				poke.setHealth(resultSet.getInt("hp"));
				
				allPokemon.add(poke);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return allPokemon;

	}

}
